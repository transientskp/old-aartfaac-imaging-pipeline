#!/usr/bin/env python

from string import Template
from itertools import chain
import subprocess
import tempfile
import argparse
import os

SERVER_CMD = "@CMAKE_INSTALL_PREFIX@/bin/aartfaac-server"
TEMPLATE_XML = Template("""
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pelican>

<configuration version="1.0">
  <server>
    <buffers>
      <StreamBlob>
        <buffer maxSize="${buffer_max_size}" maxChunkSize="${buffer_max_chunk_size}"/>
      </StreamBlob>
    </buffers>

    <chunkers>
      ${chunker_definitions}
    </chunkers>
  </server>
</configuration>
""".strip())
TEMPLATE_CHUNKER = Template("""
<StreamChunker name="${stream_chunker_name}">
  <data type="StreamBlob"/>
  <stream subbands="${subbands}"
          numChannels="${num_channels}"
          frequency="${start_frequency}"
          width="${channel_width}" />
  <connection host="${input_host}" port="${input_port}" />
</StreamChunker>
""".strip())

def generate_xml(save_xml, **kwargs):
    """Returns a temporary file object"""
    xmlfile = tempfile.NamedTemporaryFile(delete=(not save_xml))
    xmlfile.write(
        TEMPLATE_XML.substitute(**kwargs)
    )
    xmlfile.flush()
    if save_xml:
        print "Saved XML file as %s" % (xmlfile.name,)
    return xmlfile

def generate_chunkers(config):
    chunkers = []
    for i, stream_info in enumerate(config.stream):
        name = "Stream%d" % (i,)
        port = config.input_port_start + i
        print "Chunker %s listening on port %d" % (name, port)
        chunkers.append(
            TEMPLATE_CHUNKER.substitute(
                stream_chunker_name=name,
                subbands=",".join("-".join(x) for x in config.subband),
                num_channels = stream_info[0],
                start_frequency = stream_info[1],
                channel_width = stream_info[2],
                input_host = config.input_host,
                input_port = port
            )
        )
    return "\n".join(chunkers)

def get_configuration():
    """Rerturns a populated configuration"""
    parser = argparse.ArgumentParser()
    parser.add_argument("--buffer-max-size", help="???", default=4294967296)
    parser.add_argument("--buffer-max-chunk-size", help="???", default=4294967296)
    parser.add_argument("--stream-chunker-name", help="StreamChunker name", default="Stream1")
    parser.add_argument("--input-host", help="Address for incoming data", default="0.0.0.0")
    parser.add_argument("--input-port-start", help="First port for incoming data (increases with chunkers)", default=4100, type=int)
    parser.add_argument("--save-xml", help="Don't delete XML file", action="store_true")
    parser.add_argument("--stream", help="Add stream: <num_channels> <start_freq> <channel_width> (units of Hz)", action="append", nargs=3)
    parser.add_argument("subband", help="Define a subband: <first channel>-<last channel> (inclusive)", type=lambda x: x.split('-'), nargs="*")
    return parser.parse_args()

if __name__ == "__main__":
    config = get_configuration()

    xmlfile = generate_xml(
        config.save_xml,
        buffer_max_size=config.buffer_max_size,
        buffer_max_chunk_size=config.buffer_max_chunk_size,
        chunker_definitions=generate_chunkers(config)
    )
    subprocess.call([SERVER_CMD, xmlfile.name])
