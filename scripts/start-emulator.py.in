#!/usr/bin/env python

from string import Template
import subprocess
import tempfile
import argparse
import os

DEFAULT_SERVER_NAME = "AARTFAAC_SERVER"
EMULATOR_CMD = "@CMAKE_INSTALL_PREFIX@/bin/aartfaac-emulator"
TEMPLATE_XML = Template("""
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pelican>

<configuration version="1.0">
  <connection     host="${host}" port="${port}" />
  <measurementset name="${ms}" />
  <emulator       packetInterval="${packet_interval}"/>
</configuration>
""".strip())

def generate_xml(save_xml, **kwargs):
    """Returns a temporary file object"""
    xmlfile = tempfile.NamedTemporaryFile(delete=(not save_xml))
    xmlfile.write(TEMPLATE_XML.substitute(**kwargs))
    xmlfile.flush()
    if save_xml:
        print "Saved XML file as %s" % (xmlfile.name,)
    return xmlfile

def read_environment(name, port):
    """Returns a hostname, port tuple"""
    host_env_var = DEFAULT_SERVER_NAME + "_PORT_" + str(port) + "_TCP_ADDR"
    port_env_var = DEFAULT_SERVER_NAME + "_PORT_" + str(port) + "_TCP_PORT"
    if host_env_var in os.environ and port_env_var in os.environ:
        server_name = os.environ[host_env_var]
        server_port = os.environ[port_env_var]
    else:
        raise Exception("AARTFAAC server not found")
    print "Found AARTFAAC server at %s:%s" % (server_name, server_port)
    return server_name, server_port

def get_configuration():
    """Returns a populated configuration"""
    parser = argparse.ArgumentParser()
    parser.add_argument("--server-host", help="Server hostname", default="<search environment>")
    parser.add_argument("--server-port", help="Server port", default=4100)
    parser.add_argument("--packet-interval", help="Packet interval (ms)", type=int, default=10)
    parser.add_argument("--save-xml", help="Don't delete XML file", action="store_true")
    parser.add_argument("ms", help="MeasurementSet containing data to send")
    config = parser.parse_args()
    if config.server_host == "<search environment>":
        config.server_host, config.server_port = read_environment(
            DEFAULT_SERVER_NAME, config.server_port
        )
    return config

if __name__ == "__main__":
    config = get_configuration()

    # Sanity check: input data exists
    assert(os.path.exists(config.ms))

    xmlfile = generate_xml(
        config.save_xml,
        host=config.server_host,
        port=config.server_port,
        ms=config.ms,
        packet_interval=config.packet_interval
    )
    subprocess.call([EMULATOR_CMD, xmlfile.name])
